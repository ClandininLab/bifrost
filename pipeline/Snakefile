# ================================================================================================== #
#                                              PREAMBLE                                              #
# ================================================================================================== #
from warnings import warn

SAMPLES, CHANNELS, IMAGES = glob_wildcards("data/{sample}/{channel}/{image}.nii")

BOOLEAN_PARAMETERS = {
    "skip_affine",
    "skip_syn",
    "skip_synthmorph",
    "mirror_warp",
    "keep_intermediates",
    "mirror"
}

# Some parameters are already used by snakemake or do not make sense to use in
# this context and are thus ignored while parsing user-configurable parameters
IGNORED_PARAMETERS = {"log", "force", "verbose", "preemptible"}


def format_configurable_parameters(rule_name):
    """Parses and formats the user-configurable parameters specified in the config file for a given rule"""
    arg_str = ""

    for param_name, param_value in config['parameters'][rule_name].items():
        if param_name in IGNORED_PARAMETERS:
            warn(
                f"Ignored parameter '{param_name}' encountered while formatting user-configurable parameters for rule {rule_name}"
            )
            continue
        if param_name in BOOLEAN_PARAMETERS:
            if param_value is not None:
                arg_str += f"--{param_name} "
        else:
            if param_value is not None:
                arg_str += f"--{param_name} {param_value} "

    return arg_str

configfile: "config.yaml"

# ================================================================================================== #
#                                               RULES                                                #
# ================================================================================================== #


rule all:
    input:
        expand("results/transformed_images/{sample}/{channel}/{image}.nii", zip, sample=SAMPLES, channel=CHANNELS, image=IMAGES)
    localrule: True


rule clean:
    shell:
        "rm -rf results"

rule build_template:
    input:
        expand("data/{sample}/structural_image.nii", sample=SAMPLES)
    output:
        "results/template.nii"
    log:
        "logs/build_template.log"
    resources:
        runtime="7d",
    threads:
        config['max_threads']
    shell:
        "bifrost build_template -f "
        "--log {log} "
        " --input {input} "
        "--output results "
        f"{format_configurable_parameters('build_template')}"


rule register_template_to_fda:
    input:
        template="results/template.nii",
        fda="templates/FDA.nii",
    output:
        directory("results/template_to_fda")
    log:
        "logs/register_template_to_fda.log"
    resources:
        runtime="1d",
    threads:
        config['max_threads']
    shell:
        "bifrost register -f "
        "--log {log} "
        "{input.template} "
        "{input.fda} "
        "results/template_to_fda "
        f"{format_configurable_parameters('register_template_to_fda')}"



rule register_structural_images_to_template:
    input:
        image="data/{sample}/structural_image.nii",
        template="results/template.nii"
    output:
        temp(directory("results/structural_images_to_template/{sample}"))
    log:
        "logs/register_structural_images_to_template_{sample}.log"
    resources:
        runtime="1d",
    threads:
        config['max_threads']
    shell:
        "bifrost register -f "
        "--log {log} "
        "{input.image} "
        "{input.template} "
          "results/structural_images_to_template/{wildcards.sample} "
        f"{format_configurable_parameters('register_structural_images_to_template')}"



rule transform_dependent_images_to_template:
    input:
        registration="results/structural_images_to_template/{sample}",
        image="data/{sample}/{channel}/{image}.nii"
    output:
        temp("results/transform_dependent_images_to_template/{sample}/{channel}/{image}.nii")
    log:
        "logs/transform_dependent_images_to_template_{sample}_{channel}_{image}.log"
    resources:
        runtime="1d",
    threads:
        min(4,  config['max_threads'])
    shell:
        "bifrost transform "
        "--log {log} "
        "--result_name ./results/transform_dependent_images_to_template/{wildcards.sample}/{wildcards.channel}/{wildcards.image}.nii "
        "{input.registration} "
        "{input.image}"


rule transform_dependent_images_to_fda:
    input:
        registration="results/template_to_fda",
        image="results/transform_dependent_images_to_template/{sample}/{channel}/{image}.nii"
    output:
        "results/transformed_images/{sample}/{channel}/{image}.nii"
    log:
        "logs/transform_dependent_images_to_fda_{sample}_{channel}_{image}.log"
    resources:
        runtime="1d",
    threads:
        min(4,  config['max_threads'])
    shell:
        "bifrost transform "
        "--log {log} "
        "--result_name ./results/transformed_images/{wildcards.sample}/{wildcards.channel}/{wildcards.image}.nii "
        "{input.registration} "
        "{input.image}"
